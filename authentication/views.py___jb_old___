import json

from rest_framework import generics
from rest_framework import status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny

from django.contrib.auth import login, authenticate

from .serializers import UserSerializer, PostSerializer
from .models import User, Post

User
class AuthRegister(APIView):
    """
    Register a new user.
    """
    serializer_class = UserSerializer
    permission_classes = (AllowAny,)

    def post(self, request, format=None):
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class AuthLogin(APIView):
    ''' Manual implementation of login method '''
    def post(self, request, format=None):
        data = request.data
        username = data.get('username', None)
        #email = data.get('email', None)
        password = data.get('password', None)

        User = authenticate(username=username, password=password)
        # Generate token and add it to the response object
        if User is not None:
            login(request, User)
            return Response({
                'status': 'Successful',
                'message': 'You have successfully been logged into your account.'
            }, status=status.HTTP_200_OK)

        return Response({
            'status': 'Unauthorized',
            'message': 'Username/password combination invalid.'
        }, status=status.HTTP_401_UNAUTHORIZED)

class PostList(APIView):
    #lists posts
    def get(self,request, format=None):
        Posts = Post.objects.all()
        serializer = PostSerializer(Posts, many=True)
        return Response(serializer.data)
    def post(self,request, format=None):
        #creates a post
        jwt_token = (request.META.get('HTTP_AUTHORIZATION')) #Gets the token #JWT Ne radi dobro.
        print(request.user) #ne loguje ga dobro
        userid = request.user.id
        if not request.data._mutable:
            request.data._mutable = True
      # request.data.creator = username
       # serializer.data.creator = username does not work
        serializer = PostSerializer(data=request.data) #assigning value directly to the
        request.data['creator'] = userid
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class LikeList(APIView):
    serializer_class = PostSerializer
    Post = Post.objects.all()
    def get(self,request,format=None):
        post_id = (request.GET.get('postid'))
        like = request.GET.get('like')
        userid = request.user.id
        Post = Post.object.get(pk=post_id)
        if(like != 'false'):
            Post.likers.add(userid)
        else:
            Post.likers.delete(userid)
        serializer = PostSerializer(Post)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
